#include "HTML5LaunchHelper.h"
#include "Misc/Paths.h"
#include "HAL/PlatformFilemanager.h"
#include "Misc/FileHelper.h"
#include "GenericPlatform/GenericPlatformProcess.h"
#include "Misc/CommandLine.h"
#include "Misc/App.h"
#include "Misc/MessageDialog.h"

bool FHTML5LaunchHelper::PackageHTML5(const FString& ProjectPath, const FString& OutputPath, bool bFullRebuild)
{
    // Validate input parameters
    if (ProjectPath.IsEmpty() || OutputPath.IsEmpty())
    {
        UE_LOG(LogTemp, Error, TEXT("HTML5 Packaging: Invalid project or output path provided."));
        return false;
    }
    
    // Ensure output directory exists
    IPlatformFile& PlatformFile = FPlatformFileManager::Get().GetPlatformFile();
    if (!PlatformFile.DirectoryExists(*OutputPath))
    {
        PlatformFile.CreateDirectoryTree(*OutputPath);
    }
    
    // Get the project name from the project path
    FString ProjectName = FPaths::GetBaseFilename(ProjectPath);
    
    // Create a build script for Emscripten
    FString EmscriptenBuildScript = FPaths::Combine(OutputPath, TEXT("build.bat"));
    FString EmscriptenContents = FString::Printf(
        TEXT("@echo off\n")
        TEXT("set PROJECT=%s\n")
        TEXT("set OUTPUT_DIR=%s\n")
        TEXT("\n")
        TEXT("echo Building %s for HTML5...\n")
        TEXT("\n")
        TEXT("REM This is where you would run the actual Emscripten compilation\n")
        TEXT("REM For example, using emcc to compile your C++ code to WebAssembly\n")
        TEXT("\n")
        TEXT("echo Packaging completed!\n")
        TEXT("echo Output is available at: %s\n"),
        *ProjectName,
        *OutputPath,
        *ProjectName,
        *OutputPath
    );
    
    // Write the build script
    if (!FFileHelper::SaveStringToFile(EmscriptenContents, *EmscriptenBuildScript))
    {
        UE_LOG(LogTemp, Error, TEXT("HTML5 Packaging: Failed to create Emscripten build script."));
        return false;
    }
    
    // Generate a simple HTML template
    if (!GenerateHTML5Template(OutputPath, ProjectName))
    {
        UE_LOG(LogTemp, Error, TEXT("HTML5 Packaging: Failed to generate HTML template."));
        return false;
    }
    
    // Create a sample JavaScript file to demonstrate compilation
    FString JSFile = FPaths::Combine(OutputPath, FString::Printf(TEXT("%s.js"), *ProjectName));
    FString JSContent = FString::Printf(
        TEXT("// Generated JavaScript file for %s\n")
        TEXT("var Module = {\n")
        TEXT("    onRuntimeInitialized: function() {\n")
        TEXT("        console.log('UE5 HTML5 runtime initialized');\n")
        TEXT("    },\n")
        TEXT("    canvas: (function() {\n")
        TEXT("        var canvas = document.getElementById('canvas');\n")
        TEXT("        return canvas;\n")
        TEXT("    })(),\n")
        TEXT("    print: function(text) {\n")
        TEXT("        console.log(text);\n")
        TEXT("    },\n")
        TEXT("    printErr: function(text) {\n")
        TEXT("        console.error(text);\n")
        TEXT("    }\n")
        TEXT("};\n"),
        *ProjectName
    );
    
    if (!FFileHelper::SaveStringToFile(JSContent, *JSFile))
    {
        UE_LOG(LogTemp, Error, TEXT("HTML5 Packaging: Failed to create JavaScript file."));
        return false;
    }
    
    // Create a placeholder data file
    FString DataFile = FPaths::Combine(OutputPath, FString::Printf(TEXT("%s.data"), *ProjectName));
    FString DataContent = TEXT("This is a placeholder for the game data file that would be generated by the actual Emscripten compilation.");
    
    if (!FFileHelper::SaveStringToFile(DataContent, *DataFile))
    {
        UE_LOG(LogTemp, Error, TEXT("HTML5 Packaging: Failed to create data file."));
        return false;
    }
    
    // Create a placeholder wasm file (just a text file for this example)
    FString WasmFile = FPaths::Combine(OutputPath, FString::Printf(TEXT("%s.wasm"), *ProjectName));
    FString WasmContent = TEXT("This is a placeholder for the WebAssembly binary that would be generated by the actual Emscripten compilation.");
    
    if (!FFileHelper::SaveStringToFile(WasmContent, *WasmFile))
    {
        UE_LOG(LogTemp, Error, TEXT("HTML5 Packaging: Failed to create wasm file."));
        return false;
    }
    
    UE_LOG(LogTemp, Display, TEXT("HTML5 Packaging: Completed successfully! Output is available at: %s"), *OutputPath);
    return true;
}

bool FHTML5LaunchHelper::GenerateHTML5Template(const FString& OutputPath, const FString& ProjectName)
{
    FString IndexFilePath = FPaths::Combine(OutputPath, TEXT("index.html"));
    
    FString HTMLTemplate = FString::Printf(
        TEXT("<!DOCTYPE html>\n")
        TEXT("<html lang=\"en\">\n")
        TEXT("<head>\n")
        TEXT("    <meta charset=\"UTF-8\">\n")
        TEXT("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n")
        TEXT("    <title>%s - UE5 HTML5</title>\n")
        TEXT("    <style>\n")
        TEXT("        body {\n")
        TEXT("            font-family: Arial, sans-serif;\n")
        TEXT("            margin: 0;\n")
        TEXT("            background-color: #333;\n")
        TEXT("            color: #fff;\n")
        TEXT("        }\n")
        TEXT("        .container {\n")
        TEXT("            display: flex;\n")
        TEXT("            flex-direction: column;\n")
        TEXT("            align-items: center;\n")
        TEXT("            justify-content: center;\n")
        TEXT("            height: 100vh;\n")
        TEXT("        }\n")
        TEXT("        h1 {\n")
        TEXT("            color: #4CAF50;\n")
        TEXT("        }\n")
        TEXT("        #canvas {\n")
        TEXT("            width: 800px;\n")
        TEXT("            height: 600px;\n")
        TEXT("            background-color: #000;\n")
        TEXT("            margin: 20px;\n")
        TEXT("            border: 2px solid #4CAF50;\n")
        TEXT("        }\n")
        TEXT("        #loading {\n")
        TEXT("            text-align: center;\n")
        TEXT("            margin: 20px;\n")
        TEXT("        }\n")
        TEXT("        .progress {\n")
        TEXT("            width: 100%%;\n")
        TEXT("            height: 20px;\n")
        TEXT("            background-color: #555;\n")
        TEXT("            border-radius: 10px;\n")
        TEXT("            margin-top: 10px;\n")
        TEXT("            overflow: hidden;\n")
        TEXT("        }\n")
        TEXT("        .progress-bar {\n")
        TEXT("            width: 0%%;\n")
        TEXT("            height: 100%%;\n")
        TEXT("            background-color: #4CAF50;\n")
        TEXT("            transition: width 0.3s;\n")
        TEXT("        }\n")
        TEXT("    </style>\n")
        TEXT("</head>\n")
        TEXT("<body>\n")
        TEXT("    <div class=\"container\">\n")
        TEXT("        <h1>%s</h1>\n")
        TEXT("        <canvas id=\"canvas\"></canvas>\n")
        TEXT("        <div id=\"loading\">\n")
        TEXT("            <p>Loading game... <span id=\"progress-text\">0%%</span></p>\n")
        TEXT("            <div class=\"progress\">\n")
        TEXT("                <div class=\"progress-bar\" id=\"progress-bar\"></div>\n")
        TEXT("            </div>\n")
        TEXT("        </div>\n")
        TEXT("    </div>\n")
        TEXT("\n")
        TEXT("    <script src=\"%s.js\"></script>\n")
        TEXT("    <script>\n")
        TEXT("        // Simulate loading progress\n")
        TEXT("        let progress = 0;\n")
        TEXT("        const progressBar = document.getElementById('progress-bar');\n")
        TEXT("        const progressText = document.getElementById('progress-text');\n")
        TEXT("        const loading = document.getElementById('loading');\n")
        TEXT("\n")
        TEXT("        function updateProgress() {\n")
        TEXT("            if (progress < 100) {\n")
        TEXT("                progress += Math.random() * 10;\n")
        TEXT("                if (progress > 100) progress = 100;\n")
        TEXT("                progressBar.style.width = progress + '%%';\n")
        TEXT("                progressText.textContent = Math.round(progress) + '%%';\n")
        TEXT("                setTimeout(updateProgress, 500);\n")
        TEXT("            } else {\n")
        TEXT("                setTimeout(() => {\n")
        TEXT("                    loading.innerHTML = '<p>Game loaded! This is a HTML5 build placeholder for UE5.</p>';\n")
        TEXT("                }, 500);\n")
        TEXT("            }\n")
        TEXT("        }\n")
        TEXT("\n")
        TEXT("        updateProgress();\n")
        TEXT("    </script>\n")
        TEXT("</body>\n")
        TEXT("</html>\n"),
        *ProjectName,
        *ProjectName,
        *ProjectName
    );
    
    return FFileHelper::SaveStringToFile(HTMLTemplate, *IndexFilePath);
} 